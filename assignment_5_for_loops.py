# -*- coding: utf-8 -*-
"""Assignment #5: For Loops

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xZKLKFpGrbXGm53g9n1cubUS7WSqKrZE

User defined function for prime numbers
"""

def prime_num():
    while True:
      # START BY ELIMINATING PRIME NUMS FIRST
        try:
            user_num = input("Enter the first number: ")
            # to make sure integer is positive
            if user_num[0] == "-":
                print("You have entered a negative integer. Please try again.")
                continue

            # define numbers as integers to handle ValueErrors
            user_num = int(user_num)

        # in case the user doesn't enter an integer
        except ValueError:
            print("Please neter an integer.")
            continue

        # to find all prime numbers:
        for number in range(2, user_num + 1):
          # start with 2 - user_num, iterate by 1 ...
          # then for the number in the range if its divisible by 2 then its NOT prime
            for i in range(2, number):
               if number % i == 0:
                break
            # if its prime then print (not divisible by 2)
            else:
              print(number)
        break

        run_again = input('Would you like to run prime_nums again?: ')
        if run_again != 'y':
         break

"""User defined function for Pascals's triangle

*   idk if the calculation is right or if the starting value is right but at least its pyramidish

"""

def pascals_triangle():
  # same as usual
  while True:

    try:
      user_rows = input("Enter the number of rows: ")

      if user_rows[0] == '-':
        print("Please enter a positie integer. ")
        continue

      user_rows = int(user_rows)
    except ValueError:
      print("Please enter an integer.")
      continue

    for i in range(user_rows): #ROW NUM
        # print a space and then rows - current rw - 1 and then end with a space
        # like 10 = 10 then 9 then 8 etc i think so space row space then space row - 1 space until it gets to the top
        print(" " * (user_rows - i - 1), end="")

        # start at the first row
        starting_row = 1 #STARTING POSITION AT 1 ?

        # THEN FOR EACH POSITION (j) (wont work w/ other variable)
        # VALUE + 1 EACH TIME
        for j in range(i + 1):
            # PRINT THE CURRENT ROW AND END WITH A SPACE TO MAKE TRIANGLE
            print(starting_row, end=" ")

            # THEN FIND THE NEXT VALUE IN THE ROW USING THE FORMULA
            starting_row = starting_row * (i - j) // (j + 1)   # apparenlty this is the correct formula

        # print and hope it works
        print()
    break

    run_again = input('run program again?')
    if run_agani != 'y':
      break

"""NOTES ?"""

# ok so say theres 5 rows
# ----*----    1
# ---***---   3      # FOR ROWS: so start with space, then go row - current row - 1 on each side then space,
# --*****--   5      # FOR ELEMENTS: need another varibale(j i think or n ) for the row position, then current row(i) to next element so +1 on each side...
# -*******-  7       # FOR VALUES: need another varibale for value in position in row so nested loop...
# ********* 9        # for the value you need to multiply by something apparently so need to set starting value to something what

# FORMULA = (row number (let it be i) - position (let it be j or n?)) divided by (position + the row number) ??????????? sure

"""MAIN"""

while True:
  # for user to chose the program
  program_choice = input("Enter the program you would like to run: ('p' for prime nums or 't' for pascals triangle: )")

  # in case user enters an invalid program choice
  if program_choice != 't' and program_choice != 'p':
    print("Invalid choice. Please try again. ")
    continue

  # FOR PRIME NUMBER CALCULATOR
  elif program_choice == 'p':
    prime_num()


  # FOR PASCALS TRIANGLE
  elif program_choice == 't':
    pascals_triangle()

  # invlaid choice
  else:
    print("invalid choice. Please try again. /n")
    continue


# run program again (while loop)
  run_program_again = input("Would you like to run the program again? ('y' for yes, 'stop' to exit): ")
  if run_program_again != 'y':
    break